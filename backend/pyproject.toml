[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["app"]

[project]
name = "g-kentei-backend"
version = "1.0.0"
description = "G検定対策ツール - Backend API"
readme = "README.md"
license = { text = "MIT" }
authors = [
    { name = "G-Kentei Team" }
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Education",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
requires-python = ">=3.11"

dependencies = [
    # FastAPI & Web Server
    "fastapi==0.104.1",
    "uvicorn[standard]==0.24.0",
    "pydantic==2.5.0",
    "pydantic-settings==2.1.0",
    
    # Database
    "sqlalchemy==2.0.25",
    "alembic==1.13.1",
    
    # ChromaDB & Vector Search
    "chromadb==0.4.22",
    "sentence-transformers==2.2.2",
    
    # ML & Transformers
    "torch==2.2.0",
    "transformers==4.36.2",
    "tokenizers==0.15.0",
    "numpy==1.26.4",
    
    # LLM
    "llama-cpp-python==0.2.11",
    
    # Data Processing
    "pandas==2.1.4",
    "tqdm==4.66.1",
    
    # Web Scraping
    "playwright==1.41.0",
    "beautifulsoup4==4.12.2",
    "requests==2.31.0",
    
    # Utilities
    "python-multipart==0.0.6",
    "python-dotenv==1.0.0",
]

[project.optional-dependencies]
dev = [
    # Development & Testing
    "pytest==7.4.3",
    "pytest-asyncio==0.23.2",
    "httpx==0.25.2",
    
    # Code Quality
    "ruff==0.1.8",
    "mypy==1.8.0",
    
    # Pre-commit
    "pre-commit==3.6.0",
]

prod = [
    # Production dependencies
    "gunicorn==21.2.0",
]

[project.urls]
Homepage = "https://github.com/tokiwa-akira/gkentei"
Repository = "https://github.com/tokiwa-akira/gkentei.git"
Issues = "https://github.com/tokiwa-akira/gkentei/issues"

[tool.ruff]
line-length = 88
target-version = "py311"

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "TID", # flake8-tidy-imports
    "Q",   # flake8-quotes
    "FBT", # flake8-boolean-trap
    "PLR", # pylint refactor
    "PIE", # flake8-pie
]
ignore = [
    "E501",  # line too long (handled by formatter)
    "B008",  # do not perform function calls in argument defaults
    "ARG002", # unused method argument
    "TID252", # prefer absolute imports
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]  # unused imports in __init__.py
"tests/**/*.py" = ["ARG", "FBT"]  # test functions can have unused args and boolean traps

[tool.ruff.lint.isort]
known-first-party = ["app"]
split-on-trailing-comma = true

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.mypy]
python_version = "3.11"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true

[[tool.mypy.overrides]]
module = [
    "chromadb.*",
    "sentence_transformers.*",
    "llama_cpp.*",
    "playwright.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v --tb=short"
asyncio_mode = "auto"